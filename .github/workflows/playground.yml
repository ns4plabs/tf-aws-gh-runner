name: Playground

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/playground.yml
      
jobs:
  go-test:
    runs-on: ["self-hosted", "linux", "x64", "playground"]
    timeout-minutes: 20
    env:
      TEST_DOCKER: 0
      TEST_FUSE: 0
      TEST_VERBOSE: 1
      TRAVIS: 1
      GIT_PAGER: cat
      IPFS_CHECK_RCMGR_DEFAULTS: 1
    defaults:
      run:
        shell: bash
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.1
      - name: Check out Kubo
        uses: actions/checkout@v3
        with:
          repository: ipfs/kubo
      - name: Restore Go cache
        uses: protocol/cache-go-action@v1
        with:
          name: ${{ github.job }}
      - name: 👉️ If this step failed, go to «Summary» (top left) → inspect the «Failures/Errors» table
        env:
          # increasing parallelism beyond 2 doesn't speed up the tests much
          PARALLEL: 2
        run: |
          make -j "$PARALLEL" test/unit/gotest.junit.xml &&
            [[ ! $(jq -s -c 'map(select(.Action == "fail")) | .[]' test/unit/gotest.json) ]]
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@81cd2dc8148241f03f5839d295e000b8f761e378 # v3.1.0
        if: failure() || success()
        with:
          name: unittests
          files: coverage/unit_tests.coverprofile
      - name: Test kubo-as-a-library example
        run: |
          # we want to first test with the kubo version in the go.mod file
          go test -v ./...

          # we also want to test the examples against the current version of kubo
          # however, that version might be in a fork so we need to replace the dependency

          # backup the go.mod and go.sum files to restore them after we run the tests
          cp go.mod go.mod.bak
          cp go.sum go.sum.bak

          # make sure the examples run against the current version of kubo
          go mod edit -replace github.com/ipfs/kubo=./../../..
          go mod tidy

          go test -v ./...

          # restore the go.mod and go.sum files to their original state
          mv go.mod.bak go.mod
          mv go.sum.bak go.sum
        working-directory: docs/examples/kubo-as-a-library
      - name: Create a proper JUnit XML report
        uses: pl-strflt/gotest-json-to-junit-xml@v1
        with:
          input: test/unit/gotest.json
          output: test/unit/gotest.junit.xml
        if: failure() || success()
      - name: Archive the JUnit XML report
        uses: actions/upload-artifact@v3
        with:
          name: unit
          path: test/unit/gotest.junit.xml
        if: failure() || success()
      - name: Create a HTML report
        uses: pl-strflt/junit-xml-to-html@v1
        with:
          mode: no-frames
          input: test/unit/gotest.junit.xml
          output: test/unit/gotest.html
        if: failure() || success()
      - name: Archive the HTML report
        uses: actions/upload-artifact@v3
        with:
          name: html
          path: test/unit/gotest.html
        if: failure() || success()
      - name: Create a Markdown report
        uses: pl-strflt/junit-xml-to-html@v1
        with:
          mode: summary
          input: test/unit/gotest.junit.xml
          output: test/unit/gotest.md
        if: failure() || success()
      - name: Set the summary
        run: cat test/unit/gotest.md >> $GITHUB_STEP_SUMMARY
        if: failure() || success()
  sharness-test:
    runs-on: ["self-hosted", "linux", "x64", "playground"]
    timeout-minutes: 20
    defaults:
      run:
        shell: bash
    steps:
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.1
      - name: Checkout Kubo
        uses: actions/checkout@v3
        with:
          path: kubo
          repository: ipfs/kubo
      - name: Install missing tools
        run: sudo apt install -y socat net-tools fish libxml2-utils
      - name: Restore Go Cache
        uses: protocol/cache-go-action@v1
        with:
          name: ${{ github.job }}
      - uses: actions/cache@v3
        with:
          path: test/sharness/lib/dependencies
          key: ${{ runner.os }}-test-generate-junit-html-${{ hashFiles('test/sharness/lib/test-generate-junit-html.sh') }}
      - name: Run Sharness tests
        run: |
          make -O -j "$PARALLEL" \
            test_sharness \
            coverage/sharness_tests.coverprofile \
            test/sharness/test-results/sharness.xml
        working-directory: kubo
        env:
          TEST_DOCKER: 1
          TEST_PLUGIN: 0
          TEST_FUSE: 0
          TEST_VERBOSE: 1
          TEST_JUNIT: 1
          TEST_EXPENSIVE: 1
          IPFS_CHECK_RCMGR_DEFAULTS: 1
          CONTINUE_ON_S_FAILURE: 1
          # increasing parallelism beyond 10 doesn't speed up the tests much
          PARALLEL: ${{ github.repository == 'ipfs/kubo' && 10 || 3 }}
      - name: Upload coverage report
        uses: codecov/codecov-action@81cd2dc8148241f03f5839d295e000b8f761e378 # v3.1.0
        if: failure() || success()
        with:
          name: sharness
          files: kubo/coverage/sharness_tests.coverprofile
      - name: Aggregate results
        run: find kubo/test/sharness/test-results -name 't*-*.sh.*.counts' | kubo/test/sharness/lib/sharness/aggregate-results.sh > kubo/test/sharness/test-results/summary.txt
      - name: 👉️ If this step failed, go to «Summary» (top left) → «HTML Report» → inspect the «Failures» column
        run: |
          cat kubo/test/sharness/test-results/summary.txt &&
          grep 'failed\s*0' kubo/test/sharness/test-results/summary.txt
      - name: Add aggregate results to the summary
        if: failure() || success()
        run: |
          echo "# Summary" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          cat kubo/test/sharness/test-results/summary.txt >> $GITHUB_STEP_SUMMARY
      - name: Generate one-page HTML report
        uses: pl-strflt/junit-xml-to-html@v1
        if: failure() || success()
        with:
          mode: no-frames
          input: kubo/test/sharness/test-results/sharness.xml
          output: kubo/test/sharness/test-results/sharness.html
      - name: Upload one-page HTML report to S3
        id: one-page
        uses: pl-strflt/tf-aws-gh-runner/.github/actions/upload-artifact@main
        if: github.repository == 'ipfs/kubo' && (failure() || success())
        with:
          source: kubo/test/sharness/test-results/sharness.html
          destination: sharness.html
      - name: Upload one-page HTML report
        if: github.repository != 'ipfs/kubo' && (failure() || success())
        uses: actions/upload-artifact@v3
        with:
          name: sharness.html
          path: kubo/test/sharness/test-results/sharness.html
      - name: Generate full HTML report
        uses: pl-strflt/junit-xml-to-html@v1
        if: failure() || success()
        with:
          mode: frames
          input: kubo/test/sharness/test-results/sharness.xml
          output: kubo/test/sharness/test-results/sharness-html
      - name: Upload full HTML report to S3
        id: full
        uses: pl-strflt/tf-aws-gh-runner/.github/actions/upload-artifact@main
        if: github.repository == 'ipfs/kubo' && (failure() || success())
        with:
          source: kubo/test/sharness/test-results/sharness-html
          destination: sharness-html/
      - name: Upload full HTML report
        if: github.repository != 'ipfs/kubo' && (failure() || success())
        uses: actions/upload-artifact@v3
        with:
          name: sharness-html
          path: kubo/test/sharness/test-results/sharness-html
      - name: Add S3 links to the summary
        if: github.repository == 'ipfs/kubo' && (failure() || success())
        run: echo "$MD" >> $GITHUB_STEP_SUMMARY
        env:
          MD: |
            # HTML Reports

            - View the [one page HTML report](${{ steps.one-page.outputs.url }})
            - View the [full HTML report](${{ steps.full.outputs.url }}index.html)
