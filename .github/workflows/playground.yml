name: Playground

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/playground.yml

jobs:
  playground:
    name: Play
    runs-on: ["self-hosted", "windows", "x64", "playground"]
    steps:
      - run: |
          $Region = "us-east-1"
          $password = "password"
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $username = $env:USERNAME
          
          $docker_parameters=$(aws ssm get-parameters-by-path --path "/tf-aws-gh-runner/docker" --region "$Region" --query "Parameters[*].{Name:Name,Value:Value}") | ConvertFrom-Json
          echo "Retrieved docker parameters from AWS SSM"
          
          ### Docker Registry Proxy
          
          $docker_proxy=$docker_parameters.where( {$_.Name -eq "/tf-aws-gh-runner/docker/proxy_aws_lb_dns_name"} ).value
          echo "Retrieved /tf-aws-gh-runner/docker/proxy_aws_lb_dns_name parameter - ($docker_proxy)"

          $dockerConfigPath = "C:\ProgramData\Docker\config\daemon.json"
          $dockerConfig = @{
              'insecure-registries' = @($docker_proxy)
              'registry-mirrors' = @("http://$docker_proxy")
          }
          $dockerConfig | ConvertTo-Json | Set-Content -Path $dockerConfigPath
          echo "$dockerConfig"

          Restart-Service -Name "docker"

          $goproxy=$docker_parameters.where( {$_.Name -eq "/tf-aws-gh-runner/docker/goproxy_aws_lb_dns_name"} ).value
          echo "Retrieved /tf-aws-gh-runner/docker/goproxy_aws_lb_dns_name parameter - ($goproxy)"

          [Environment]::SetEnvironmentVariable("GOPROXY", "http://$goproxy,direct", "Machine")

          docker version

          $startRunnerServicePath = "C:\start-runner-service.ps1"
          $startRunnerService = @"
            Write-Host "Starting the runner in ephemeral mode"

            `$securePassword = ConvertTo-SecureString "$password" -AsPlainText -Force
            `$credentials = New-Object System.Management.Automation.PSCredential ("$username", `$securePassword)
            Start-Process "powershell.exe" -ArgumentList '-Command', "echo '$($pwd.Path)'" -Wait -NoNewWindow
            # Start-Process -FilePath "run.cmd" -Credential `$credentials -WorkingDirectory "$($pwd.Path)" -Wait -NoNewWindow
            `$exitCode = `$LASTEXITCODE
            Write-Host "Runner has finished with `$exitCode exit code"
            # Ideas for further improvements:
            # - Check if /var/runner-startup.log contains Listening for Jobs
            # - Check exit code of ./run.sh
            Write-Host "Wait for 30 seconds to ensure all logs are flushed"
            Start-Sleep -Seconds 30
            Write-Host "Stopping cloudwatch service"
            & 'C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1' -a stop
            Write-Host "Terminating instance"
            # aws ec2 terminate-instances --instance-ids "$InstanceId" --region "$Region"
          "@
          $startRunnerService | Set-Content -Path $startRunnerServicePath

          Start-Process -FilePath "powershell.exe" -ArgumentList "-File", "$startRunnerServicePath" -Wait -NoNewWindow
          $exitCode = $LASTEXITCODE
          Write-Host "Start has finished with $exitCode exit code"
